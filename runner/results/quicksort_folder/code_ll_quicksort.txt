new basic block
Basic Block name: do_nothing
Of function : do_nothing

do_nothing:
  ret void
new basic block
Basic Block name: swap
Of function : swap

swap:
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  store i32* %0, i32** %2, align 8
  store i32* %1, i32** %3, align 8
  %5 = load i32*, i32** %2, align 8
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %4, align 4
  %7 = load i32*, i32** %3, align 8
  %8 = load i32, i32* %7, align 4
  %9 = load i32*, i32** %2, align 8
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* %4, align 4
  %11 = load i32*, i32** %3, align 8
  store i32 %10, i32* %11, align 4
  ret void
new basic block
Basic Block name: partition
Of function : partition

partition:
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 %2, i32* %5, align 4
  %9 = load i32*, i32** %3, align 8
  %10 = load i32, i32* %5, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %4, align 4
  %15 = sub nsw i32 %14, 1
  store i32 %15, i32* %7, align 4
  %16 = load i32, i32* %4, align 4
  store i32 %16, i32* %8, align 4
  br label %17
new basic block
Basic Block name: partition1
Of function : partition

partition1:                                       ; preds = %40, %partition
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %5, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %43
new basic block
Basic Block name: partition2
Of function : partition

partition2:                                       ; preds = %partition1
  %20 = load i32*, i32** %3, align 8
  %21 = load i32, i32* %8, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %20, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* %6, align 4
  %26 = icmp sle i32 %24, %25
  br i1 %26, label %27, label %38
Case 1  
new basic block
Basic Block name: partition3
Of function : partition

partition3:                                       ; preds = %partition2
  %27 = load i32, i32* %7, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %7, align 4
  %29 = load i32*, i32** %3, align 8
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %29, i64 %31
  %33 = load i32*, i32** %3, align 8
  %34 = load i32, i32* %8, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, i32* %33, i64 %35
  call void @rapl_B()
  call void @swap(i32* %32, i32* %36)
  call void @rapl_C()
  br label %37
new basic block
Basic Block name: partition4
Of function : partition

partition4:                                       ; preds = %partition3, %partition2
  br label %37
new basic block
Basic Block name: partition5
Of function : partition

partition5:                                       ; preds = %partition4
  %37 = load i32, i32* %8, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %8, align 4
  br label %partition1
Case 1  
new basic block
Basic Block name: partition6
Of function : partition

partition6:                                       ; preds = %partition1
  %39 = load i32*, i32** %3, align 8
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, i32* %39, i64 %42
  %44 = load i32*, i32** %3, align 8
  %45 = load i32, i32* %5, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  call void @rapl_B()
  call void @swap(i32* %43, i32* %47)
  call void @rapl_C()
  %48 = load i32, i32* %7, align 4
  %49 = add nsw i32 %48, 1
  ret i32 %49
new basic block
Basic Block name: quickSort
Of function : quickSort

quickSort:
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 %2, i32* %5, align 4
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %23
Case 1  
Case 1  
Case 1  
new basic block
Basic Block name: quickSort1
Of function : quickSort

quickSort1:                                       ; preds = %quickSort
  %10 = load i32*, i32** %3, align 8
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  call void @rapl_B()
  %13 = call i32 @partition(i32* %10, i32 %11, i32 %12)
  call void @rapl_C()
  store i32 %13, i32* %6, align 4
  %14 = load i32*, i32** %3, align 8
  %15 = load i32, i32* %4, align 4
  %16 = load i32, i32* %6, align 4
  %17 = sub nsw i32 %16, 1
  call void @rapl_B()
  call void @quickSort(i32* %14, i32 %15, i32 %17)
  call void @rapl_C()
  %18 = load i32*, i32** %3, align 8
  %19 = load i32, i32* %6, align 4
  %20 = add nsw i32 %19, 1
  %21 = load i32, i32* %5, align 4
  call void @rapl_B()
  call void @quickSort(i32* %18, i32 %20, i32 %21)
  call void @rapl_C()
  br label %22
new basic block
Basic Block name: quickSort2
Of function : quickSort

quickSort2:                                       ; preds = %quickSort1, %quickSort
  ret void
new basic block
Basic Block name: printArray
Of function : printArray

printArray:
  %2 = alloca i32*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32* %0, i32** %2, align 8
  store i32 %1, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %5
new basic block
Basic Block name: printArray1
Of function : printArray

printArray1:                                      ; preds = %15, %printArray
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %8, label %18
Case 1  
new basic block
Basic Block name: printArray2
Of function : printArray

printArray2:                                      ; preds = %printArray1
  %8 = load i32*, i32** %2, align 8
  %9 = load i32, i32* %4, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %8, i64 %10
  %12 = load i32, i32* %11, align 4
  call void @rapl_B()
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %12)
  call void @rapl_C()
  br label %14
new basic block
Basic Block name: printArray3
Of function : printArray

printArray3:                                      ; preds = %printArray2
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %4, align 4
  br label %printArray1
Case 1  
new basic block
Basic Block name: printArray4
Of function : printArray

printArray4:                                      ; preds = %printArray1
  call void @rapl_B()
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  call void @rapl_C()
  ret void
Case 1  
Case 1  
Case 1  
Case 1  
Case 1  
Case 1  
Case 1  
Case 1  
new basic block
Basic Block name: main
Of function : main

main:
  %0 = alloca [59 x i32], align 16
  %1 = alloca i32, align 4
  call void @rapl_B()
  call void @do_nothing()
  call void @rapl_C()
  %2 = bitcast [59 x i32]* %0 to i8*
  call void @rapl_B()
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %2, i8* align 16 bitcast ([59 x i32]* @__const.main.data to i8*), i64 236, i1 false)
  call void @rapl_C()
  store i32 59, i32* %1, align 4
  call void @rapl_B()
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  call void @rapl_C()
  %4 = getelementptr inbounds [59 x i32], [59 x i32]* %0, i64 0, i64 0
  %5 = load i32, i32* %1, align 4
  call void @rapl_B()
  call void @printArray(i32* %4, i32 %5)
  call void @rapl_C()
  %6 = getelementptr inbounds [59 x i32], [59 x i32]* %0, i64 0, i64 0
  %7 = load i32, i32* %1, align 4
  %8 = sub nsw i32 %7, 1
  call void @rapl_B()
  call void @quickSort(i32* %6, i32 0, i32 %8)
  call void @rapl_C()
  call void @rapl_B()
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  call void @rapl_C()
  %10 = getelementptr inbounds [59 x i32], [59 x i32]* %0, i64 0, i64 0
  %11 = load i32, i32* %1, align 4
  call void @rapl_B()
  call void @printArray(i32* %10, i32 %11)
  call void @rapl_C()
  call void @rapl_B()
  call void @do_nothing()
  call void @rapl_C()
  ret i32 0
